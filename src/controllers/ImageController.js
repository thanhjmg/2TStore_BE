const { image } = require("../cloudinary");
const { Image } = require("../models");
const cloudinary = require("../cloudinary");
const multer = require("multer");
const storage = multer.memoryStorage();
const upload = multer({ storage: storage }).array("images", 10);
const uploadToCloudinary = (file) => {
  return new Promise((resolve, reject) => {
    const stream = cloudinary.uploader.upload_stream(
      { folder: "products" },
      (error, result) => {
        if (error) {
          reject(error);
        } else {
          resolve(result.secure_url);
        }
      }
    );
    stream.end(file.buffer); // G·ª≠i buffer c·ªßa file v√†o stream
  });
};

const ImageController = {
  getImageByType: async (req, res) => {
    try {
      const { type } = req.params;
      const getImgByType = await Image.findAll({
        where: { type: type },
      });
      res.status(200).json(getImgByType);
    } catch (error) {
      res.status(401).json(error);
    }
  },
  deleteImgById: async (req, res) => {
    try {
      const { id } = req.params;

      // T√¨m ·∫£nh theo ID
      const imgById = await Image.findByPk(id);
      if (!imgById) {
        return res.status(404).json({ error: "·∫¢nh kh√¥ng t·ªìn t·∫°i!" });
      }

      // üî• N·∫øu c√≥ l∆∞u tr√™n Cloudinary, x√≥a lu√¥n
      const imageUrl = imgById.url;
      const publicId = imageUrl.split("/").slice(-2).join("/").split(".")[0]; // L·∫•y public_id t·ª´ URL

      // X√≥a ·∫£nh tr√™n Cloudinary
      await cloudinary.uploader.destroy(publicId);

      // X√≥a ·∫£nh trong database
      await imgById.destroy();

      return res.status(200).json({ message: "X√≥a ·∫£nh th√†nh c√¥ng!" });
    } catch (error) {
      console.error("L·ªói x√≥a ·∫£nh:", error);
      return res.status(500).json({ error: "L·ªói server!" });
    }
  },
};
module.exports = ImageController;
